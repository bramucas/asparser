%{
#include <string.h>
#include "asparser.h"
#include "y.tab.h"	/* Tokens definitions generated by yacc (option -d)*/

extern int yyerror(char *);
%}
%option noyywrap
%array

DIGIT    [0-9]
ID       [a-z][a-zA-Z0-9_]*
STRING   ("\""[^\"]*"\"")|("\'"[^\']*"\'")

STATNAME [A-Z0-9][A-Za-z]+


%%

"OPTIMUM FOUND"		{return OPTIMUMFOUND;}
"SATISFIABLE"		{return SATISFIABLE;}
"UNSATISFIABLE"		{return UNSATISFIABLE;} 
"Answer:"			{return ANSWER;}

"1st Model"		{return STAT_TIME_FIRST_MODEL;}



("asprin"|"clingo").+\n.+\n"Solving..."	{ yylval.strval=strCopy(yytext); return HEADER;}

{STATNAME}				{ yylval.strval=strCopy(yytext); return STATNAME; }
{DIGIT}+"."{DIGIT}+s	{ yylval.strval=strCopy(yytext); return SECONDS;  }
{DIGIT}+	{ yylval.strval=strCopy(yytext); return NUMBER; }
{ID}		{ yylval.strval=strCopy(yytext); return ID; }
{STRING}	{ 
	int len=strlen(yytext)-2;
    yylval.strval = (char *) malloc(len+1);
	yylval.strval[len]='\0';
	if (len)		  		  
  	    strncpy(yylval.strval,yytext+1,len);
	return STRING;
	}

"/*"([^*]|"*"[^/])*"*/"	{
	char *s;
	for (s=yytext;(s=strchr(s,'\n'))!=NULL; s++,yyline++);
	}

"%"[^\n]*	{} /* eat up one-line comments */

[ \t\r]+	/* eat up whitespace */

\n			{yyline++;}

.           {return yytext[0];}

%%
